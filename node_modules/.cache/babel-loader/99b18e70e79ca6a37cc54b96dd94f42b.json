{"ast":null,"code":"const ADD_TASK = 'ADD_TASK';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME';\nconst DELETE_TASK = 'DELETE_TASK';\nlet state = {\n  store: {\n    task: [],\n    newTask: ''\n  },\n\n  rerenderTree() {\n    console.log(1);\n  },\n\n  subscribe(f) {\n    this.rerenderTree = f;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_TASK) {\n      let newTask = {\n        id: 4,\n        text: this.store.newTask\n      };\n      this.store.task.push(newTask);\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_INPUT) {\n      this.store.newTask = action.newTask;\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_TASK_NAME) {\n      for (let txt in this.store.task) {\n        if (this.store.task[txt].text === action.nameDoneTask) {\n          this.store.task[txt].done = action.flag;\n          console.log(this.store.task[txt]);\n          return;\n        }\n      } //this.store.task[action.nameDoneTask].done = true;\n\n\n      this.rerenderTree();\n    }\n  }\n\n};\nexport let addTask = () => {\n  return {\n    type: ADD_TASK\n  };\n};\nexport let updateTask = text => {\n  return {\n    type: UPDATE_INPUT,\n    newTask: text\n  };\n};\nexport let addClassNameTask = (text, isFlag) => {\n  return {\n    type: UPDATE_TASK_NAME,\n    nameDoneTask: text,\n    flag: isFlag\n  };\n};\nexport let deleteTask = (text, isFlag) => {\n  return {\n    type: DELETE_TASK,\n    nameDoneTask: text,\n    flag: isFlag\n  };\n};\nexport let maxId = () => {\n  let max = 0;\n  this.store.task[0].id ? max = this.store.task[0].id : max = -1;\n\n  for (let i in this.store.task) {//this.store.task[i].id \n  }\n};\nexport default state;","map":{"version":3,"names":["ADD_TASK","UPDATE_INPUT","UPDATE_TASK_NAME","DELETE_TASK","state","store","task","newTask","rerenderTree","console","log","subscribe","f","dispatch","action","type","id","text","push","txt","nameDoneTask","done","flag","addTask","updateTask","addClassNameTask","isFlag","deleteTask","maxId","max","i"],"sources":["/Users/19691163/Desktop/todolist/todo/src/state/store.jsx"],"sourcesContent":["const ADD_TASK = 'ADD_TASK'\nconst UPDATE_INPUT = 'UPDATE_INPUT'\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME'\nconst DELETE_TASK = 'DELETE_TASK'\n\nlet state = {\n    store:{\n        task: [\n            \n        ],\n        newTask: ''   \n    },\n\n    rerenderTree(){\n        console.log(1);\n    },\n\n    subscribe(f){\n        this.rerenderTree = f\n    },\n\n    dispatch(action){\n        \n        if(action.type === ADD_TASK){\n            let newTask = {\n                id: 4,\n                text: this.store.newTask\n            }\n            this.store.task.push(newTask)\n            this.rerenderTree()\n        }\n        if(action.type === UPDATE_INPUT){\n            this.store.newTask = action.newTask\n            this.rerenderTree()\n        }\n        if(action.type === UPDATE_TASK_NAME){\n            for(let txt in this.store.task){\n                if(this.store.task[txt].text === action.nameDoneTask){\n                    this.store.task[txt].done = action.flag;\n                    console.log(this.store.task[txt])\n                    return\n                }\n            }\n            //this.store.task[action.nameDoneTask].done = true;\n            this.rerenderTree();\n        } \n    }\n}\n\nexport let addTask = () => {\n    return{\n        type: ADD_TASK\n    }\n}\n\nexport let updateTask = (text) => {\n    return{\n        type: UPDATE_INPUT,\n        newTask: text\n    }\n}\n\nexport let addClassNameTask = (text, isFlag) => {\n    return{\n        type: UPDATE_TASK_NAME,\n        nameDoneTask: text,\n        flag: isFlag\n    }\n}\n\nexport let deleteTask = (text, isFlag) => {\n    return{\n        type: DELETE_TASK,\n        nameDoneTask: text,\n        flag: isFlag\n    }\n}\n\nexport let maxId = () => {\n    let max = 0;\n    this.store.task[0].id ? max = this.store.task[0].id : max = -1;\n    for(let i in this.store.task){\n        //this.store.task[i].id \n    }\n}\n\nexport default state;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,IAAIC,KAAK,GAAG;EACRC,KAAK,EAAC;IACFC,IAAI,EAAE,EADJ;IAIFC,OAAO,EAAE;EAJP,CADE;;EAQRC,YAAY,GAAE;IACVC,OAAO,CAACC,GAAR,CAAY,CAAZ;EACH,CAVO;;EAYRC,SAAS,CAACC,CAAD,EAAG;IACR,KAAKJ,YAAL,GAAoBI,CAApB;EACH,CAdO;;EAgBRC,QAAQ,CAACC,MAAD,EAAQ;IAEZ,IAAGA,MAAM,CAACC,IAAP,KAAgBf,QAAnB,EAA4B;MACxB,IAAIO,OAAO,GAAG;QACVS,EAAE,EAAE,CADM;QAEVC,IAAI,EAAE,KAAKZ,KAAL,CAAWE;MAFP,CAAd;MAIA,KAAKF,KAAL,CAAWC,IAAX,CAAgBY,IAAhB,CAAqBX,OAArB;MACA,KAAKC,YAAL;IACH;;IACD,IAAGM,MAAM,CAACC,IAAP,KAAgBd,YAAnB,EAAgC;MAC5B,KAAKI,KAAL,CAAWE,OAAX,GAAqBO,MAAM,CAACP,OAA5B;MACA,KAAKC,YAAL;IACH;;IACD,IAAGM,MAAM,CAACC,IAAP,KAAgBb,gBAAnB,EAAoC;MAChC,KAAI,IAAIiB,GAAR,IAAe,KAAKd,KAAL,CAAWC,IAA1B,EAA+B;QAC3B,IAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBa,GAAhB,EAAqBF,IAArB,KAA8BH,MAAM,CAACM,YAAxC,EAAqD;UACjD,KAAKf,KAAL,CAAWC,IAAX,CAAgBa,GAAhB,EAAqBE,IAArB,GAA4BP,MAAM,CAACQ,IAAnC;UACAb,OAAO,CAACC,GAAR,CAAY,KAAKL,KAAL,CAAWC,IAAX,CAAgBa,GAAhB,CAAZ;UACA;QACH;MACJ,CAP+B,CAQhC;;;MACA,KAAKX,YAAL;IACH;EACJ;;AAzCO,CAAZ;AA4CA,OAAO,IAAIe,OAAO,GAAG,MAAM;EACvB,OAAM;IACFR,IAAI,EAAEf;EADJ,CAAN;AAGH,CAJM;AAMP,OAAO,IAAIwB,UAAU,GAAIP,IAAD,IAAU;EAC9B,OAAM;IACFF,IAAI,EAAEd,YADJ;IAEFM,OAAO,EAAEU;EAFP,CAAN;AAIH,CALM;AAOP,OAAO,IAAIQ,gBAAgB,GAAG,CAACR,IAAD,EAAOS,MAAP,KAAkB;EAC5C,OAAM;IACFX,IAAI,EAAEb,gBADJ;IAEFkB,YAAY,EAAEH,IAFZ;IAGFK,IAAI,EAAEI;EAHJ,CAAN;AAKH,CANM;AAQP,OAAO,IAAIC,UAAU,GAAG,CAACV,IAAD,EAAOS,MAAP,KAAkB;EACtC,OAAM;IACFX,IAAI,EAAEZ,WADJ;IAEFiB,YAAY,EAAEH,IAFZ;IAGFK,IAAI,EAAEI;EAHJ,CAAN;AAKH,CANM;AAQP,OAAO,IAAIE,KAAK,GAAG,MAAM;EACrB,IAAIC,GAAG,GAAG,CAAV;EACA,KAAKxB,KAAL,CAAWC,IAAX,CAAgB,CAAhB,EAAmBU,EAAnB,GAAwBa,GAAG,GAAG,KAAKxB,KAAL,CAAWC,IAAX,CAAgB,CAAhB,EAAmBU,EAAjD,GAAsDa,GAAG,GAAG,CAAC,CAA7D;;EACA,KAAI,IAAIC,CAAR,IAAa,KAAKzB,KAAL,CAAWC,IAAxB,EAA6B,CACzB;EACH;AACJ,CANM;AAQP,eAAeF,KAAf"},"metadata":{},"sourceType":"module"}