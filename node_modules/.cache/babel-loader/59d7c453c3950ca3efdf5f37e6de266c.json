{"ast":null,"code":"const ADD_TASK = 'ADD_TASK';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME';\nconst DELETE_TASK = 'DELETE_TASK';\nlet state = {\n  store: {\n    task: [{\n      id: 1,\n      text: \"Первая задача\",\n      done: false\n    }, {\n      id: 2,\n      text: \"Вторая задача\",\n      done: false\n    }, {\n      id: 3,\n      text: \"Третья задача\",\n      done: false\n    }],\n    newTask: ''\n  },\n\n  rerenderTree() {\n    console.log(1);\n  },\n\n  subscribe(f) {\n    this.rerenderTree = f;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_TASK) {\n      let newTask = {\n        id: maxId(this.state.store),\n        text: this.store.newTask\n      };\n      this.store.task.push(newTask);\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_INPUT) {\n      this.store.newTask = action.newTask;\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_TASK_NAME) {\n      for (let txt in this.store.task) {\n        if (this.store.task[txt].text === action.nameDoneTask) {\n          this.store.task[txt].done = action.flag;\n          console.log(this.store.task[txt]);\n          return;\n        }\n      }\n\n      this.rerenderTree();\n    }\n\n    if (action.type === DELETE_TASK) {\n      for (let d in this.store.task) {\n        if (this.store.task[d].id === action.idTask) {\n          delete this.store.task[d];\n          return;\n        }\n      }\n    }\n  }\n\n};\nexport let addTask = () => {\n  return {\n    type: ADD_TASK\n  };\n};\nexport let updateTask = text => {\n  return {\n    type: UPDATE_INPUT,\n    newTask: text\n  };\n};\nexport let addClassNameTask = (text, isFlag) => {\n  return {\n    type: UPDATE_TASK_NAME,\n    nameDoneTask: text,\n    flag: isFlag\n  };\n};\nexport let deleteTask = id => {\n  return {\n    type: DELETE_TASK,\n    idTask: id\n  };\n};\nexport let maxId = store => {\n  let max = 0;\n\n  if (store.task[0].id) {\n    max = store.task[0].id;\n  } else {\n    return -1;\n  }\n\n  for (let i in store.task) {\n    if (store.task[i].id > max) {\n      max = store.task[i].id;\n    }\n  }\n\n  return max;\n};\nexport default state;","map":{"version":3,"names":["ADD_TASK","UPDATE_INPUT","UPDATE_TASK_NAME","DELETE_TASK","state","store","task","id","text","done","newTask","rerenderTree","console","log","subscribe","f","dispatch","action","type","maxId","push","txt","nameDoneTask","flag","d","idTask","addTask","updateTask","addClassNameTask","isFlag","deleteTask","max","i"],"sources":["/Users/19691163/Desktop/todolist/todo/src/state/store.jsx"],"sourcesContent":["const ADD_TASK = 'ADD_TASK'\nconst UPDATE_INPUT = 'UPDATE_INPUT'\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME'\nconst DELETE_TASK = 'DELETE_TASK'\n\nlet state = {\n    store:{\n        task: [\n            {id: 1, text: \"Первая задача\", done: false},\n            {id: 2, text: \"Вторая задача\", done: false},\n            {id: 3, text: \"Третья задача\", done: false},\n        ],\n        newTask: ''   \n    },\n\n    rerenderTree(){\n        console.log(1);\n    },\n\n    subscribe(f){\n        this.rerenderTree = f\n    },\n\n    dispatch(action){\n        \n        if(action.type === ADD_TASK){\n            let newTask = {\n                id: maxId(this.state.store),\n                text: this.store.newTask\n            }\n            this.store.task.push(newTask)\n            this.rerenderTree()\n        }\n        if(action.type === UPDATE_INPUT){\n            this.store.newTask = action.newTask\n            this.rerenderTree()\n        }\n        if(action.type === UPDATE_TASK_NAME){\n            for(let txt in this.store.task){\n                if(this.store.task[txt].text === action.nameDoneTask){\n                    this.store.task[txt].done = action.flag;\n                    console.log(this.store.task[txt])\n                    return\n                }\n            }\n            this.rerenderTree();\n        } \n        if(action.type === DELETE_TASK){\n            for(let d in this.store.task){\n                if(this.store.task[d].id === action.idTask){\n                    delete this.store.task[d];\n                    return;\n                }\n            }\n        }\n    }\n}\n\nexport let addTask = () => {\n    return{\n        type: ADD_TASK\n    }\n}\n\nexport let updateTask = (text) => {\n    return{\n        type: UPDATE_INPUT,\n        newTask: text\n    }\n}\n\nexport let addClassNameTask = (text, isFlag) => {\n    return{\n        type: UPDATE_TASK_NAME,\n        nameDoneTask: text,\n        flag: isFlag\n    }\n}\n\nexport let deleteTask = (id) => {\n    return{\n        type: DELETE_TASK,\n        idTask: id\n    }\n}\n\nexport let maxId = (store) => {\n    let max = 0;\n    if(store.task[0].id){\n        max = store.task[0].id\n    } \n    else{\n        return -1;\n    }\n    \n    for(let i in store.task){\n        if(store.task[i].id > max){\n            max = store.task[i].id;\n        }\n    }\n    return max;\n}\n\nexport default state;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,UAAjB;AACA,MAAMC,YAAY,GAAG,cAArB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,IAAIC,KAAK,GAAG;EACRC,KAAK,EAAC;IACFC,IAAI,EAAE,CACF;MAACC,EAAE,EAAE,CAAL;MAAQC,IAAI,EAAE,eAAd;MAA+BC,IAAI,EAAE;IAArC,CADE,EAEF;MAACF,EAAE,EAAE,CAAL;MAAQC,IAAI,EAAE,eAAd;MAA+BC,IAAI,EAAE;IAArC,CAFE,EAGF;MAACF,EAAE,EAAE,CAAL;MAAQC,IAAI,EAAE,eAAd;MAA+BC,IAAI,EAAE;IAArC,CAHE,CADJ;IAMFC,OAAO,EAAE;EANP,CADE;;EAURC,YAAY,GAAE;IACVC,OAAO,CAACC,GAAR,CAAY,CAAZ;EACH,CAZO;;EAcRC,SAAS,CAACC,CAAD,EAAG;IACR,KAAKJ,YAAL,GAAoBI,CAApB;EACH,CAhBO;;EAkBRC,QAAQ,CAACC,MAAD,EAAQ;IAEZ,IAAGA,MAAM,CAACC,IAAP,KAAgBlB,QAAnB,EAA4B;MACxB,IAAIU,OAAO,GAAG;QACVH,EAAE,EAAEY,KAAK,CAAC,KAAKf,KAAL,CAAWC,KAAZ,CADC;QAEVG,IAAI,EAAE,KAAKH,KAAL,CAAWK;MAFP,CAAd;MAIA,KAAKL,KAAL,CAAWC,IAAX,CAAgBc,IAAhB,CAAqBV,OAArB;MACA,KAAKC,YAAL;IACH;;IACD,IAAGM,MAAM,CAACC,IAAP,KAAgBjB,YAAnB,EAAgC;MAC5B,KAAKI,KAAL,CAAWK,OAAX,GAAqBO,MAAM,CAACP,OAA5B;MACA,KAAKC,YAAL;IACH;;IACD,IAAGM,MAAM,CAACC,IAAP,KAAgBhB,gBAAnB,EAAoC;MAChC,KAAI,IAAImB,GAAR,IAAe,KAAKhB,KAAL,CAAWC,IAA1B,EAA+B;QAC3B,IAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBe,GAAhB,EAAqBb,IAArB,KAA8BS,MAAM,CAACK,YAAxC,EAAqD;UACjD,KAAKjB,KAAL,CAAWC,IAAX,CAAgBe,GAAhB,EAAqBZ,IAArB,GAA4BQ,MAAM,CAACM,IAAnC;UACAX,OAAO,CAACC,GAAR,CAAY,KAAKR,KAAL,CAAWC,IAAX,CAAgBe,GAAhB,CAAZ;UACA;QACH;MACJ;;MACD,KAAKV,YAAL;IACH;;IACD,IAAGM,MAAM,CAACC,IAAP,KAAgBf,WAAnB,EAA+B;MAC3B,KAAI,IAAIqB,CAAR,IAAa,KAAKnB,KAAL,CAAWC,IAAxB,EAA6B;QACzB,IAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBkB,CAAhB,EAAmBjB,EAAnB,KAA0BU,MAAM,CAACQ,MAApC,EAA2C;UACvC,OAAO,KAAKpB,KAAL,CAAWC,IAAX,CAAgBkB,CAAhB,CAAP;UACA;QACH;MACJ;IACJ;EACJ;;AAlDO,CAAZ;AAqDA,OAAO,IAAIE,OAAO,GAAG,MAAM;EACvB,OAAM;IACFR,IAAI,EAAElB;EADJ,CAAN;AAGH,CAJM;AAMP,OAAO,IAAI2B,UAAU,GAAInB,IAAD,IAAU;EAC9B,OAAM;IACFU,IAAI,EAAEjB,YADJ;IAEFS,OAAO,EAAEF;EAFP,CAAN;AAIH,CALM;AAOP,OAAO,IAAIoB,gBAAgB,GAAG,CAACpB,IAAD,EAAOqB,MAAP,KAAkB;EAC5C,OAAM;IACFX,IAAI,EAAEhB,gBADJ;IAEFoB,YAAY,EAAEd,IAFZ;IAGFe,IAAI,EAAEM;EAHJ,CAAN;AAKH,CANM;AAQP,OAAO,IAAIC,UAAU,GAAIvB,EAAD,IAAQ;EAC5B,OAAM;IACFW,IAAI,EAAEf,WADJ;IAEFsB,MAAM,EAAElB;EAFN,CAAN;AAIH,CALM;AAOP,OAAO,IAAIY,KAAK,GAAId,KAAD,IAAW;EAC1B,IAAI0B,GAAG,GAAG,CAAV;;EACA,IAAG1B,KAAK,CAACC,IAAN,CAAW,CAAX,EAAcC,EAAjB,EAAoB;IAChBwB,GAAG,GAAG1B,KAAK,CAACC,IAAN,CAAW,CAAX,EAAcC,EAApB;EACH,CAFD,MAGI;IACA,OAAO,CAAC,CAAR;EACH;;EAED,KAAI,IAAIyB,CAAR,IAAa3B,KAAK,CAACC,IAAnB,EAAwB;IACpB,IAAGD,KAAK,CAACC,IAAN,CAAW0B,CAAX,EAAczB,EAAd,GAAmBwB,GAAtB,EAA0B;MACtBA,GAAG,GAAG1B,KAAK,CAACC,IAAN,CAAW0B,CAAX,EAAczB,EAApB;IACH;EACJ;;EACD,OAAOwB,GAAP;AACH,CAfM;AAiBP,eAAe3B,KAAf"},"metadata":{},"sourceType":"module"}