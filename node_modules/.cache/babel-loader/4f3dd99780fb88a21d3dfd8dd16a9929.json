{"ast":null,"code":"const ADD_TASK = 'ADD_TASK';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME';\nconst DELETE_TASK = 'DELETE_TASK';\nlet state = {\n  store: {\n    task: [// {id: 1, text: \"Первая задача\", done: false},\n      // {id: 2, text: \"Вторая задача\", done: false},\n      // {id: 3, text: \"Третья задача\", done: false},\n    ],\n    newTask: ''\n  },\n\n  rerenderTree() {\n    console.log(1);\n  },\n\n  subscribe(f) {\n    this.rerenderTree = f;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_TASK) {\n      if (this.store.newTask === '') return;\n      let newTask = {\n        id: maxId(this.store),\n        text: this.store.newTask\n      };\n      this.store.task.push(newTask);\n      this.store.newTask = '';\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_INPUT) {\n      this.store.newTask = action.newTesk;\n      this.rerenderTree();\n    }\n\n    if (action.type === UPDATE_TASK_NAME) {\n      for (let txt in this.store.task) {\n        if (this.store.task[txt].text === action.nameDoneTask) {\n          this.store.task[txt].done = action.flag;\n        }\n      }\n\n      console.log(this.store.task);\n      this.rerenderTree();\n    }\n\n    if (action.type === DELETE_TASK) {\n      for (let d in this.store.task) {\n        if (this.store.task[d].id === action.idTask) {\n          this.store.task.splice(d, 1);\n          this.rerenderTree();\n          return;\n        }\n      }\n    }\n  }\n\n};\nexport let addTask = () => {\n  return {\n    type: ADD_TASK\n  };\n};\nexport let updateTask = text => {\n  return {\n    type: UPDATE_INPUT,\n    newTesk: text\n  };\n};\nexport let addClassNameTask = (text, isFlag) => {\n  return {\n    type: UPDATE_TASK_NAME,\n    nameDoneTask: text,\n    flag: isFlag\n  };\n};\nexport let deleteTask = id => {\n  return {\n    type: DELETE_TASK,\n    idTask: id\n  };\n};\nexport let maxId = store => {\n  var _store$task$;\n\n  let max = 0;\n\n  if ((_store$task$ = store.task[0]) !== null && _store$task$ !== void 0 && _store$task$.id) {\n    max = store.task[0].id;\n  } else {\n    return 0;\n  }\n\n  for (let i in store.task) {\n    if (store.task[i].id > max) {\n      max = store.task[i].id;\n    }\n  }\n\n  return max + 1;\n};\nexport default state;","map":{"version":3,"names":["ADD_TASK","UPDATE_INPUT","UPDATE_TASK_NAME","DELETE_TASK","state","store","task","newTask","rerenderTree","console","log","subscribe","f","dispatch","action","type","id","maxId","text","push","newTesk","txt","nameDoneTask","done","flag","d","idTask","splice","addTask","updateTask","addClassNameTask","isFlag","deleteTask","max","i"],"sources":["E:/todo/todoList/src/state/store.jsx"],"sourcesContent":["const ADD_TASK = 'ADD_TASK'\r\nconst UPDATE_INPUT = 'UPDATE_INPUT'\r\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME'\r\nconst DELETE_TASK = 'DELETE_TASK'\r\n\r\nlet state = {\r\n    store:{\r\n        task: [\r\n            // {id: 1, text: \"Первая задача\", done: false},\r\n            // {id: 2, text: \"Вторая задача\", done: false},\r\n            // {id: 3, text: \"Третья задача\", done: false},\r\n        ],\r\n        newTask: ''   \r\n    },\r\n\r\n    rerenderTree(){\r\n        console.log(1);\r\n    },\r\n\r\n    subscribe(f){\r\n        this.rerenderTree = f\r\n    },\r\n\r\n    dispatch(action){      \r\n        if(action.type === ADD_TASK){\r\n            if(this.store.newTask === '')\r\n                return\r\n            \r\n            let newTask = {\r\n                id: maxId(this.store),\r\n                text: this.store.newTask,\r\n                \r\n            }\r\n            \r\n            this.store.task.push(newTask)\r\n            this.store.newTask = ''\r\n            this.rerenderTree()\r\n        }\r\n        if(action.type === UPDATE_INPUT){\r\n            this.store.newTask = action.newTesk\r\n            this.rerenderTree()\r\n        }\r\n        if(action.type === UPDATE_TASK_NAME){\r\n            for(let txt in this.store.task){\r\n                if(this.store.task[txt].text === action.nameDoneTask){\r\n                    this.store.task[txt].done = action.flag;\r\n                    \r\n                }\r\n            }\r\n            console.log(this.store.task)\r\n            this.rerenderTree();\r\n        } \r\n        if(action.type === DELETE_TASK){\r\n            for(let d in this.store.task){\r\n                if(this.store.task[d].id === action.idTask){\r\n                    this.store.task.splice(d, 1);\r\n                    this.rerenderTree();\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport let addTask = () => {\r\n    return{\r\n        type: ADD_TASK\r\n    }\r\n}\r\n\r\nexport let updateTask = (text) => {\r\n    return{\r\n        type: UPDATE_INPUT,\r\n        newTesk: text\r\n    }\r\n}\r\n\r\nexport let addClassNameTask = (text, isFlag) => {\r\n    return{\r\n        type: UPDATE_TASK_NAME,\r\n        nameDoneTask: text,\r\n        flag: isFlag\r\n    }\r\n}\r\n\r\nexport let deleteTask = (id) => {\r\n    return{\r\n        type: DELETE_TASK,\r\n        idTask: id\r\n    }\r\n}\r\n\r\nexport let maxId = (store) => {\r\n    let max = 0;\r\n    if(store.task[0]?.id){\r\n        max = store.task[0].id\r\n    } \r\n    else{\r\n        return 0;\r\n    }\r\n    \r\n    for(let i in store.task){\r\n        if(store.task[i].id > max){\r\n            max = store.task[i].id;\r\n        }\r\n    }\r\n    return max + 1;\r\n}\r\n\r\nexport default state;"],"mappings":"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"},"metadata":{},"sourceType":"module"}