{"ast":null,"code":"const ADD_TASK = 'ADD_TASK';\nconst UPDATE_INPUT = 'UPDATE_INPUT';\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME';\nconst DELETE_TASK = 'DELETE_TASK';\nconst UPDATE = 'UPDATE';\nlet state = {\n  store: {\n    task: [// {id: 1, text: \"Первая задача\", done: false},\n      // {id: 2, text: \"Вторая задача\", done: false},\n      // {id: 3, text: \"Третья задача\", done: false},\n    ],\n    newTask: ''\n  },\n\n  rerenderTree() {\n    console.log(1);\n  },\n\n  subscribe(f) {\n    this.rerenderTree = f;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_TASK) {\n      if (this.store.newTask === '') return;\n      let newTask = {\n        id: maxId(this.store),\n        text: this.store.newTask,\n        done: 'nonactive'\n      };\n      this.store.task.push(newTask);\n      this.store.newTask = '';\n      this.rerenderTree();\n    } else if (action.type === UPDATE_INPUT) {\n      this.store.newTask = action.newTesk;\n      this.rerenderTree();\n    } else if (action.type === UPDATE_TASK_NAME) {\n      for (let txt in this.store.task) {\n        if (this.store.task[txt].id === action.idTask) {\n          this.store.task[txt].done = action.done;\n        }\n      }\n\n      this.rerenderTree();\n    } else if (action.type === DELETE_TASK) {\n      for (let d in this.store.task) {\n        if (this.store.task[d].id === action.idTask) {\n          this.store.task.splice(d, 1);\n        }\n      }\n\n      this.rerenderTree();\n    } else if (action.type === UPDATE) {\n      for (let d in this.store.task) {\n        if (this.store.task[d].id === action.idTask) {\n          this.store.task.splice(d, 1);\n        }\n      }\n\n      this.rerenderTree();\n    }\n  }\n\n};\nexport let addTask = () => {\n  return {\n    type: ADD_TASK\n  };\n};\nexport let updateTask = text => {\n  return {\n    type: UPDATE_INPUT,\n    newTesk: text\n  };\n};\nexport let addClassNameTask = (idTask, activeState) => {\n  return {\n    type: UPDATE_TASK_NAME,\n    idTask: idTask,\n    done: activeState\n  };\n};\nexport let deleteTask = id => {\n  return {\n    type: DELETE_TASK,\n    idTask: id\n  };\n};\nexport let maxId = store => {\n  if (store.task.length === 0) {\n    return 0;\n  }\n\n  let max = 0;\n\n  for (let i in store.task) {\n    if (store.task[i].id > max) {\n      max = store.task[i].id;\n    }\n  }\n\n  return max + 1;\n};\nexport default state;","map":{"version":3,"names":["ADD_TASK","UPDATE_INPUT","UPDATE_TASK_NAME","DELETE_TASK","UPDATE","state","store","task","newTask","rerenderTree","console","log","subscribe","f","dispatch","action","type","id","maxId","text","done","push","newTesk","txt","idTask","d","splice","addTask","updateTask","addClassNameTask","activeState","deleteTask","length","max","i"],"sources":["E:/todo/todoList/src/state/store.jsx"],"sourcesContent":["const ADD_TASK = 'ADD_TASK'\r\nconst UPDATE_INPUT = 'UPDATE_INPUT'\r\nconst UPDATE_TASK_NAME = 'UPDATE_TASK_NAME'\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst UPDATE = 'UPDATE'\r\n\r\nlet state = {\r\n    store:{\r\n        task: [\r\n            // {id: 1, text: \"Первая задача\", done: false},\r\n            // {id: 2, text: \"Вторая задача\", done: false},\r\n            // {id: 3, text: \"Третья задача\", done: false},\r\n        ],\r\n        newTask: ''   \r\n    },\r\n\r\n    rerenderTree(){\r\n        console.log(1);\r\n    },\r\n\r\n    subscribe(f){\r\n        this.rerenderTree = f\r\n    },\r\n\r\n    dispatch(action){     \r\n         \r\n        if(action.type === ADD_TASK){\r\n            if(this.store.newTask === '')\r\n                return\r\n            \r\n            let newTask = {\r\n                id: maxId(this.store),\r\n                text: this.store.newTask,\r\n                done: 'nonactive'\r\n            }\r\n            \r\n            this.store.task.push(newTask)\r\n            this.store.newTask = ''\r\n            this.rerenderTree()\r\n        }\r\n        else if(action.type === UPDATE_INPUT){\r\n            this.store.newTask = action.newTesk\r\n            this.rerenderTree()\r\n        }\r\n        else if(action.type === UPDATE_TASK_NAME){\r\n            for(let txt in this.store.task){\r\n                if(this.store.task[txt].id === action.idTask){\r\n                    this.store.task[txt].done = action.done;\r\n                }\r\n            }\r\n            this.rerenderTree();\r\n        } \r\n        else if(action.type === DELETE_TASK){\r\n            for(let d in this.store.task){\r\n                if(this.store.task[d].id === action.idTask){\r\n                    this.store.task.splice(d, 1);\r\n                }\r\n            }\r\n            this.rerenderTree();\r\n        }\r\n        else if(action.type === UPDATE){\r\n            for(let d in this.store.task){\r\n                if(this.store.task[d].id === action.idTask){\r\n                    this.store.task.splice(d, 1);\r\n                }\r\n            }\r\n            this.rerenderTree();\r\n        }\r\n    }\r\n}\r\n\r\nexport let addTask = () => {\r\n    return{\r\n        type: ADD_TASK\r\n    }\r\n}\r\n\r\nexport let updateTask = (text) => {\r\n    return{\r\n        type: UPDATE_INPUT,\r\n        newTesk: text\r\n    }\r\n}\r\n\r\nexport let addClassNameTask = (idTask, activeState) => {\r\n    return{\r\n        type: UPDATE_TASK_NAME,\r\n        idTask: idTask,\r\n        done: activeState\r\n    }\r\n}\r\n\r\nexport let deleteTask = (id) => {\r\n    return{\r\n        type: DELETE_TASK,\r\n        idTask: id\r\n    }\r\n}\r\n\r\nexport let maxId = (store) => {\r\n    \r\n    \r\n    if(store.task.length === 0){\r\n        return 0\r\n    } \r\n\r\n    \r\n    let max = 0\r\n    for(let i in store.task){\r\n        if(store.task[i].id > max){\r\n            max = store.task[i].id;\r\n        }\r\n    }\r\n    return max + 1;\r\n}\r\n\r\nexport default state;"],"mappings":"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"},"metadata":{},"sourceType":"module"}